{"version":3,"sources":["features/modalSlice.js","components/Box.js","components/ShowCards.js","components/Pagination.js","App.js","app/store.js","index.js"],"names":["modalSlice","createSlice","name","initialState","text","isOpen","reducers","fill","state","action","payload","setModal","actions","Modal","styled","div","CloseBtn","button","Text","p","Box","dispatch","useDispatch","useSelector","modal","onClick","className","ShowCards","body","img","src","alt","e","style","cursor","Pagination","postsPerPage","totalPosts","paginate","pageNumbers","i","Math","ceil","push","map","number","href","App","useState","post","setPost","isLoading","setIsLoading","error","setError","searchTerm","setSearchTerm","currentPage","setCurrentPage","useEffect","fetchPost","a","axios","get","res","data","console","log","catch","message","indexOfLastPost","indexOfFirstPage","currentPost","slice","onChange","target","value","id","type","placeholder","filter","val","first_name","toLowerCase","includes","item","avatar","length","pageNumber","configureStore","reducer","modalReducer","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.994c3c52.chunk.js","sourcesContent":["import {createSlice} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n    text: \"\",\r\n    isOpen: false\r\n}\r\n\r\n\r\nexport const modalSlice = createSlice({\r\n    name: 'modal',\r\n    initialState,\r\n    reducers: {\r\n        fill: (state, action) => {\r\n            state.text = action.payload\r\n        },\r\n        setModal: (state, action) => {\r\n            state.isOpen = action.payload\r\n        }\r\n    }\r\n})\r\n\r\nexport const {fill, setModal} = modalSlice.actions\r\nexport default modalSlice.reducer","import react from 'react'\r\nimport styled from 'styled-components'\r\nimport {useSelector, useDispatch} from \"react-redux\";\r\nimport {setModal} from \"../features/modalSlice\";\r\n\r\nconst Box = () => {\r\n// Get Value from Redux Store\r\n    const dispatch = useDispatch()\r\n    const text = useSelector(state => state.modal.text)\r\n    // Dispatch to Store\r\n    const closeBox = () => {\r\n        dispatch(setModal(false))\r\n    }\r\n    return (\r\n        <Modal>\r\n            <CloseBtn onClick={closeBox}>Close</CloseBtn>\r\n            <div className=\"flex justify-center justify-items-center\">\r\n                <Text>\r\n                    {text}\r\n                </Text>\r\n            </div>\r\n        </Modal>\r\n    )\r\n}\r\n// Styled Components\r\nconst Modal = styled.div`\r\n  position: fixed;\r\n  min-width: 40vw;\r\n  min-height: 40vh;\r\n  background: #fff;\r\n  border: 2px solid blue;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n\r\n  @media (max-width: 640px) {\r\n    p {\r\n      font-size: 14px;\r\n\r\n    }\r\n  }\r\n`\r\nconst CloseBtn = styled.button`\r\n  overflow: hidden;\r\n  position: relative;\r\n  border: none;\r\n  padding: 0;\r\n  width: 2em;\r\n  height: 2em;\r\n  border-radius: 50%;\r\n  background: transparent;\r\n  color: #1da1f2;\r\n  font: inherit;\r\n  text-indent: 100%;\r\n  cursor: pointer;\r\n\r\n  &:focus {\r\n    outline: solid 0 transparent;\r\n    box-shadow: 0 0 0 2px #8ed0f9\r\n  }\r\n\r\n  &:hover {\r\n    background: rgba(29, 161, 142, .1)\r\n  }\r\n\r\n  &:before, &:after {\r\n    position: absolute;\r\n    top: 15%;\r\n    left: calc(50% - .0625em);\r\n    width: .125em;\r\n    height: 70%;\r\n    border-radius: .125em;\r\n    transform: rotate(45deg);\r\n    background: currentcolor;\r\n    content: ''\r\n  }\r\n\r\n  &:after {\r\n    transform: rotate(-45deg);\r\n  }\r\n`\r\nconst Text = styled.p`\r\n  text-align: center;\r\n  width: 25vw;\r\n`\r\n\r\nexport default Box","import {useDispatch} from \"react-redux\";\r\nimport {setModal, fill} from \"../features/modalSlice\";\r\nimport Box from \"./Box\";\r\n// Get Props from Parent Component\r\nconst ShowCards = ({body, name, img}) => {\r\n    const dispatch = useDispatch()\r\n\r\n// Dispatch for Redux Store\r\n    const showBox = (e) => {\r\n        dispatch(setModal(true))\r\n        dispatch(fill(`${body}`))\r\n    }\r\n\r\n    return (\r\n// I Used Tailwindcss in this Component\r\n\r\n        <div className=\"max-w-sm rounded overflow-hidden shadow-lg\">\r\n\r\n\r\n            <img src=\"\" alt=\"\" className=\"w-full\"/>\r\n            <div className=\"px-6 py-4\">\r\n                <div className=\"font-bold text-purple-500 text-xl mb-2 flex justify-between\">\r\n                    {name} <span>  <img src={img} alt=\"\"/></span>\r\n                </div>\r\n                <ul>\r\n                    <li>\r\n                        <strong>Post: </strong>\r\n                        <p className=\"overflow-hidden h-12\"> {body}\r\n                        </p>\r\n\r\n                    </li>\r\n\r\n                    <li>\r\n\r\n                        <button\r\n                            onClick={showBox}\r\n                            style={{cursor: \"pointer\"}}\r\n                            className=\" mt-5 bg-transparent hover:bg-blue-500 text-blue-700 font-semibold hover:text-white py-2 px-4 border border-blue-500 hover:border-transparent rounded\">\r\n                            See All Text\r\n                        </button>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n            <div className=\"px-6 py-4\">\r\n\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default ShowCards","import React from 'react';\r\n\r\nconst Pagination = ({postsPerPage, totalPosts, paginate}) => {\r\n    const pageNumbers = [];\r\n\r\n    for (let i = 1; i <= Math.ceil(totalPosts / postsPerPage); i++) {\r\n        pageNumbers.push(i);\r\n    }\r\n\r\n    return (\r\n        <nav>\r\n            <ul className='pagination flex flex-items-center flex-wrap justify-center'>\r\n                {pageNumbers.map(number => (\r\n                    <li key={number} className='border-2 bg-blue-500'>\r\n                        <a onClick={() => paginate(number)} href='!#' className='p-5'>\r\n                            {number}\r\n                        </a>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </nav>\r\n    );\r\n};\r\n\r\nexport default Pagination;","import React, {Fragment, useEffect, useState} from 'react'\nimport ShowCards from \"./components/ShowCards\";\nimport axios from \"axios\"; // Axios\nimport Box from \"./components/Box\";\nimport {useSelector} from \"react-redux\";\nimport Pagination from \"./components/Pagination\";\n\nconst App = () => {\n    // for useState alternative useReducer but I did not used it\n    const isOpen = useSelector(state => state.modal.isOpen) // Modal\n    const [post, setPost] = useState([]) // Throw Data to Array\n    const [isLoading, setIsLoading] = useState(false) // Loading..\n    const [error, setError] = useState(null) // Catch Error\n    const [searchTerm, setSearchTerm] = useState('') // Search by Name\n    const [currentPage, setCurrentPage] = useState(1) // Pagination\n    const [postsPerPage, setPostsPerPage] = useState(10)\n\n    // Fetch Data from API\n    useEffect(() => {\n        setIsLoading(true)\n        const fetchPost = async () => {\n            const res = await axios.get('https://mocki.io/v1/4ef1babb-c84b-4b81-9d56-55ede5b7bacf')\n            const data = res.data\n            console.log(data)\n            setPost(data)\n        }\n\n        fetchPost().catch(error => {\n            setError(error.message)\n        })\n\n        setIsLoading(false)\n    }, [])\n\n    // Get current Posts\n    const indexOfLastPost = currentPage * postsPerPage\n    const indexOfFirstPage = indexOfLastPost - postsPerPage\n    const currentPost = post.slice(indexOfFirstPage, indexOfLastPost)\n    // Change Page\n    const paginate = (pageNumber) => setCurrentPage(pageNumber)\n\n\n    return (\n        // I Used Tailwindcss in this Component\n        <Fragment>\n            {error && !isLoading && error}\n            {isLoading ? <p className='flex flex-center flex-align-center'>Loading...</p> :\n\n                <div className=\"container mx-auto\">\n                    <form className=\"mb-10 bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4\">\n                        {/*Listen for Each change*/}\n                        <input\n                            onChange={(e) => {\n                                setSearchTerm(e.target.value)\n                            }\n                            }\n                            className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n                            id=\"username\" type=\"text\" placeholder=\"Username\"/>\n\n                    </form>\n\n                    <div className=\"grid  flex-items-center justify-center  lg:grid-cols-3  sm:grid-cols-2 gap-4\">\n                        {/*Search by Name*/}\n                        {currentPost.filter((val) => {\n                            if (searchTerm == \"\") {\n                                return val\n                            } else if (val.first_name.toLowerCase().includes(searchTerm.toLowerCase())) {\n                                return val\n                            }\n\n                        }).map(item => (\n                            <ShowCards key={item.id} name={item.first_name} img={item.avatar} body={item.post}/>\n\n                        ))}\n\n                    </div>\n                    }\n                    {isOpen && <Box/>}\n\n\n                </div>\n            }\n            <Pagination postsPerPage={postsPerPage} totalPosts={post.length} paginate={paginate}/>\n        </Fragment>\n    )\n}\n\nexport default App","import {configureStore} from \"@reduxjs/toolkit\";\r\nimport modalReducer from \"../features/modalSlice\";\r\n\r\nexport default configureStore({\r\n    reducer: {\r\n        modal: modalReducer\r\n    }\r\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from \"./app/store\";\nimport {Provider} from \"react-redux\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}